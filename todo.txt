- If macros will live unloaded in compendia, consider whether to add caching & cache-invalidation
- Confirm we don't need compendia as a requirement, and if not, nuke it
- Check if a player can run a GM's macro by id - this may be why we need a compendium
- Probably nuke the packaged compendium either way
- Should there be a "do this as user vs do this as GM" button?
  - Probably - of note: individual user macros are accessible to everyone
- We can detect a change in token target, but not necessarily a click event. If we _do_ need "run this as GM" support, which we likely do if we want parity with e.g. multilevel tokens, then we need a message system for the DM. Abuse the chat? Whisper, but keep the record hidden somehow
- ESLint
- Prettier
- Save actual macros - should work with a single field "id" or "package.pack.id"
- point-in-polygon algorithm

```
// Execute that Macro
// Throw error is foo.data.author !== GM
if (foo.data.type === "chat") {
  ui.chat.processMessage(foo.data.command).catch(err => {
    ui.notifications.error("There was an error in your chat message syntax.");
    console.error(err);
  });
} else if (foo.data.type === "script") {
  try {
    eval(foo.data.command);
  } catch (err) {
    ui.notifications.error(`There was an error in your macro syntax. See the browser console for details`);
    console.error(err);
  }
}

// Get a Compendium
const package = 'world' // drawable-zones
const pack = 'drawable-zones' // macros
const compendium = game.packs.get(`${package}.${pack}`);

// Get an index of all the entry ids
const index = await compendium.getIndex()

// Get a Macro
const foo = await compendium.getEntity(index.find(i => i.name === "Foo")._id);


```
